#! /bin/bash -e

# This script is intended to be used with a specially modified Colab notebook.
# i.e., https://colab.research.google.com/github/j3soon/isaac-sim-colab/blob/main/notebooks/isaac-sim-4.5-colab.ipynb
# For more information, see: https://github.com/j3soon/isaac-sim-colab.

# Download and execute Python 3.10 set up script
# Ref: https://github.com/j3soon/colab-python-version
wget -O py310.sh https://raw.githubusercontent.com/j3soon/colab-python-version/main/scripts/py310.sh
bash py310.sh

# Set up Vulkan runtime dependencies
apt-get install -y vulkan-tools
# Ref: https://askubuntu.com/a/575808
apt-get install -y libglu1
# Ref: https://stackoverflow.com/a/72736003
conda install -y gcc=12.1.0 -c conda-forge
# Ref: https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_python.html
ldd --version
# Ref: https://github.com/j3soon/docker-vulkan-runtime
cat > /etc/vulkan/icd.d/nvidia_icd.json <<EOF
{
    "file_format_version" : "1.0.0",
    "ICD": {
        "library_path": "libGLX_nvidia.so.0",
        "api_version" : "1.3.194"
    }
}
EOF
mkdir -p /usr/share/glvnd/egl_vendor.d && \
    cat > /usr/share/glvnd/egl_vendor.d/10_nvidia.json <<EOF
{
    "file_format_version" : "1.0.0",
    "ICD" : {
        "library_path" : "libEGL_nvidia.so.0"
    }
}
EOF
cat > /etc/vulkan/implicit_layer.d/nvidia_layers.json <<EOF
{
    "file_format_version" : "1.0.0",
    "layer": {
        "name": "VK_LAYER_NV_optimus",
        "type": "INSTANCE",
        "library_path": "libGLX_nvidia.so.0",
        "api_version" : "1.3.194",
        "implementation_version" : "1",
        "description" : "NVIDIA Optimus layer",
        "functions": {
            "vkGetInstanceProcAddr": "vk_optimusGetInstanceProcAddr",
            "vkGetDeviceProcAddr": "vk_optimusGetDeviceProcAddr"
        },
        "enable_environment": {
            "__NV_PRIME_RENDER_OFFLOAD": "1"
        },
        "disable_environment": {
            "DISABLE_LAYER_NV_OPTIMUS_1": ""
        }
    }
}
EOF
vulkaninfo --summary

# Install uv for faster pip install
curl -LsSf https://astral.sh/uv/install.sh | sh

# Install Isaac Sim through pip.
# Ref: https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_python.html
uv pip install -qq isaacsim[all]==4.5.0 isaacsim[extscache]==4.5.0 --extra-index-url https://pypi.nvidia.com

# Download pre-compiled shader cache
# Ref: https://docs.isaacsim.omniverse.nvidia.com/4.5.0/installation/install_faq.html
# Ref: https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_container.html#container-deployment
# Ref: https://github.com/j3soon/docker-isaac-sim
# The shader cache is generated by running the `isaac-sim-simulation-example.py` for the first time on Colab. (~30 mins)
# and then run `isaacsim --no-window --allow-root` for the first time on Colab and wait until `Isaac Sim Full App is loaded.` (another ~30 mins)
# After the first run, the required shader cache will be saved in the following directories:
#
#     zip -r /content/usr-cache.zip /usr/local/lib/python3.10/site-packages/omni/cache
#     zip -r /content/ov-cache.zip /root/.cache/ov
#     zip -r /content/glcache.zip /root/.cache/nvidia/GLCache
#
# and then download the files to the local machine.
# These cache directories are required to prevent shader re-compilation on startup, and has been verified through manual testing.
# Please note that the shader cache files do not work with the `isaacsim` command, but this is not an issue since we will not use that command in Colab anyway.
wget -O glcache.zip https://github.com/j3soon/isaac-sim-colab/releases/download/v0.0.1/glcache_pip-4.5_python-script_T5-gpu.zip
unzip -d / -o glcache.zip
wget -O usr-cache.zip https://github.com/j3soon/isaac-sim-colab/releases/download/v0.0.1/usr-cache_pip-4.5_python-script_T5-gpu.zip
unzip -d / -o usr-cache.zip
wget -O ov-cache.zip https://github.com/j3soon/isaac-sim-colab/releases/download/v0.0.1/ov-cache_pip-4.5_python-script_T5-gpu.zip
unzip -d / -o ov-cache.zip

# Download Isaac Sim minimal example
wget -O time_stepping.py https://raw.githubusercontent.com/j3soon/isaac-sim-colab/refs/heads/main/thirdparty/isaacsim/standalone_examples/api/isaacsim.core.api/time_stepping.py

# Set environment variables
# Ref: https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_python.html#running-isaac-sim
export OMNI_KIT_ACCEPT_EULA=YES

# Run minimal example to test installation
# python time_stepping.py
